{"version":3,"file":"static/js/4596.98ef1c38.chunk.js","mappings":"uyBAqIA,MApHA,WACC,OAAwBA,EAAAA,EAAAA,UAAS,0CAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAoBC,EAAAA,EAAAA,SAAO,GAEzBC,GAAUC,EAAAA,EAAAA,MAAVD,MACR,GAAmCE,EAAAA,EAAAA,KAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,YACXC,GAAwBC,EAAAA,EAAAA,KAAxBD,oBACFE,GAAUC,EAAAA,EAAAA,MAEVC,EAAgC,UAAvBT,aAAA,EAAAA,EAAOU,cA6BtBC,EAAAA,EAAAA,YAAU,WACT,IAAIb,EAAkBc,QAAtB,CAGuEZ,EAA/DU,YAA+DV,EAAlDa,OAAkDb,EAA1Cc,UAA7B,IAAwCC,EAA+Bf,EAA/Be,iBAAkBC,EAAahB,EAAbgB,SAK1D,GAHAZ,EAAYY,GAGRb,IAAcc,OAAOF,GAcxB,OAbAlB,EAAQ,iDAGRqB,EAAc,CACbC,IAAI,mBACJC,wBAAyBL,EACzBM,OAAQ,CACPC,MAAO,YAITxB,EAAkBc,SAAU,GAM7BW,GAxBC,CAyBD,GAAE,CAACpB,IAGJ,IA2BS,EA3BUoB,GAA0BC,EAAAA,EAAAA,IAAS,CACrDL,IAAI,IAAD,OAAMnB,aAAN,EAAMA,EAAOe,iBAAb,YAAiCN,EAAS,oBAAsB,aAAhE,YACFT,aADE,EACFA,EAAOc,UADL,KAGHW,GAAI,CACHC,QAAS,SAACC,GACT,GAAIA,EAAM,CACT,IAAQC,EAAkCD,EAAlCC,GAAIf,EAA8Bc,EAA9Bd,OAAQgB,EAAsBF,EAAtBE,kBAjEM,EAmEL,CACpBC,SAAUF,EACVG,SAAUlB,aAAF,EAAEA,EAAQe,GAClBI,kBAAmBH,GArEvBC,EAG4B,EAH5BA,SACAE,EAE4B,EAF5BA,kBACAD,EAC4B,EAD5BA,SAEIE,EAAc,GACdC,EAAO,GACLC,EAAkCH,EAAiB,iDACZA,EADY,mBACgBA,GACtE,GAEwB,UAAvBhC,aAAA,EAAAA,EAAOU,cACVwB,EAAO,kBACPD,EAAW,gBAAYH,EAAZ,mBAA+BC,GAA/B,OAA0CI,KAErDD,EAAO,eACPD,EAAW,gBAAYH,GAAZ,OAAuBK,IAGnC5B,EAAQ6B,KAAK,CACZC,SAAUH,EACVI,OAAQL,GAmDN,CAxEyB,IAAC,EAC7BH,EACAE,EACAD,EAEIE,EACAC,EACEC,CAkEJ,EACDI,MAAO,SAACA,GACPC,QAAQD,MAAMA,EAAO,wCACrB,KAlBKE,UAuBR,GAAqCjB,EAAAA,EAAAA,IAAS,CAC7CL,IAAK,GACLuB,YAAY,EACZjB,GAAI,CACHC,SAAO,oBAAE,aAAoBiB,GAApB,kFAASC,EAAT,EAASA,QAETxB,EAA4BuB,EAAK,GAAjCvB,wBACFyB,EAAaD,EAAQE,MAC1B,SAACC,GAAD,OAAkBA,EAAIC,QAAQpB,KAAOX,OAAOG,EAA5C,IAJO,SAQFf,EAAoBwC,GARlB,OAWRtB,IAXQ,2CAAF,+CAaPgB,MAAO,SAACA,EAAOI,GAAW,KAjBTzB,EAAnB,EAAQuB,UAqBR,OAAO,gBAAKQ,UAAW,oCAAhB,SAAsDrD,GAC7D,C","sources":["pages/PreloaderPage/PreloaderPage.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useAxios, useQueryParams } from 'shared/hooks';\nimport { useAppState } from 'shared/state';\nimport { useHistory } from 'react-router';\nimport { Company } from 'modules/user/reducers';\nimport { useAsStaff } from '../BusinessManagement/hooks/useAsStaff';\nimport { CaseType } from 'shared/state/reducer';\nimport { Case, IGroupChat } from 'shared/interfaces';\n\ntype IChatEntity = Case & IGroupChat;\n\ntype HandleNavigateArgType = {\n\tentityId: number;\n\tstatusId: number;\n\tlastReadMessageId: number | null;\n};\n\nfunction PreloaderPage() {\n\tconst [text, setText] = useState('Checking data. Please, wait a while...');\n\tconst switchBusinessRef = useRef(false);\n\n\tconst { query } = useQueryParams();\n\tconst { companyId, setCaseType } = useAppState();\n\tconst { handleChangeCompany } = useAsStaff();\n\tconst history = useHistory();\n\n\tconst isCase = query?.entity_type === 'case';\n\n\tconst handleNavigateToChat = ({\n\t\tentityId,\n\t\tlastReadMessageId,\n\t\tstatusId\n\t}: HandleNavigateArgType) => {\n\t\tlet queryString = '';\n\t\tlet path = '';\n\t\tconst computedUnreadEntityChatQueries = lastReadMessageId\n\t\t\t? `&hasUnreadMessage=true&lastReadMessage=${lastReadMessageId}&unread=${lastReadMessageId}`\n\t\t\t: '';\n\n\t\tif (query?.entity_type === 'case') {\n\t\t\tpath = '/case-messages/';\n\t\t\tqueryString = `?case=${entityId}&status=${statusId}${computedUnreadEntityChatQueries}`;\n\t\t} else {\n\t\t\tpath = '/group-chat/';\n\t\t\tqueryString = `?chat=${entityId}${computedUnreadEntityChatQueries}`;\n\t\t}\n\n\t\thistory.push({\n\t\t\tpathname: path,\n\t\t\tsearch: queryString\n\t\t});\n\t};\n\n\t//Check case or chat whether it belongs to current selected company before opening chat or case\n\t//If case|chat is belongs not to selected company we must switch business before opening it\n\tuseEffect(() => {\n\t\tif (switchBusinessRef.current) {\n\t\t\treturn;\n\t\t}\n\t\tconst { entity_type, status, entity_id, business_company, caseType } = query;\n\n\t\tsetCaseType(caseType as CaseType);\n\n\t\t//If the notification is not from selected business we must switch business\n\t\tif (companyId !== Number(business_company)) {\n\t\t\tsetText('Switching business... Please, wait a while...');\n\n\t\t\t//Send async request to get list of user companies\n\t\t\tfetchBusiness({\n\t\t\t\turl: `/user/companies/`,\n\t\t\t\tnotificationFromCompany: business_company,\n\t\t\t\tparams: {\n\t\t\t\t\tlimit: 100\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tswitchBusinessRef.current = true;\n\n\t\t\treturn;\n\t\t}\n\n\t\t//If case | chat is for current selected company we fetch entity and open it immediately\n\t\tfetchSingleChatEntity();\n\t}, [companyId]);\n\n\t//fetch single case/group chat\n\tconst { fetchData: fetchSingleChatEntity } = useAxios({\n\t\turl: `/${query?.business_company}/${isCase ? 'cases/as_business' : 'ims/groups'}/${\n\t\t\tquery?.entity_id\n\t\t}/`,\n\t\tcb: {\n\t\t\tsuccess: (data: IChatEntity) => {\n\t\t\t\tif (data) {\n\t\t\t\t\tconst { id, status, last_read_message } = data;\n\n\t\t\t\t\thandleNavigateToChat({\n\t\t\t\t\t\tentityId: id,\n\t\t\t\t\t\tstatusId: status?.id,\n\t\t\t\t\t\tlastReadMessageId: last_read_message\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: (error) => {\n\t\t\t\tconsole.error(error, 'PreloaderPage > fetchSingleChatEntity');\n\t\t\t}\n\t\t}\n\t});\n\n\t//loading companies list before switching to another business\n\tconst { fetchData: fetchBusiness } = useAxios({\n\t\turl: '',\n\t\tdynamicUrl: true,\n\t\tcb: {\n\t\t\tsuccess: async ({ results }, args) => {\n\t\t\t\t//Switch to selected business whose notification came\n\t\t\t\tconst { notificationFromCompany } = args[0];\n\t\t\t\tconst newCompany = results.find(\n\t\t\t\t\t(cmp: Company) => cmp.company.id === Number(notificationFromCompany)\n\t\t\t\t);\n\n\t\t\t\t//switch to business from push\n\t\t\t\tawait handleChangeCompany(newCompany);\n\n\t\t\t\t//Fetch chat entity and open after switching is successful\n\t\t\t\tfetchSingleChatEntity();\n\t\t\t},\n\t\t\terror: (error, args) => {}\n\t\t}\n\t});\n\n\treturn <div className={'h-full w-full p-8 dark:text-white'}>{text}</div>;\n}\n\nexport default PreloaderPage;\n"],"names":["useState","text","setText","switchBusinessRef","useRef","query","useQueryParams","useAppState","companyId","setCaseType","handleChangeCompany","useAsStaff","history","useHistory","isCase","entity_type","useEffect","current","status","entity_id","business_company","caseType","Number","fetchBusiness","url","notificationFromCompany","params","limit","fetchSingleChatEntity","useAxios","cb","success","data","id","last_read_message","entityId","statusId","lastReadMessageId","queryString","path","computedUnreadEntityChatQueries","push","pathname","search","error","console","fetchData","dynamicUrl","args","results","newCompany","find","cmp","company","className"],"sourceRoot":""}