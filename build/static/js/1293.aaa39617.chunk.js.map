{"version":3,"file":"static/js/1293.aaa39617.chunk.js","mappings":"8qBAEaA,GAAsBC,E,SAAAA,I,yECKxBC,E,kGCIEC,EAAe,SAAC,GAKf,IAJbC,EAIY,EAJZA,qBACAC,EAGY,EAHZA,iBACAC,EAEY,EAFZA,kBACAC,EACY,EADZA,gBAEQC,GAAMC,EAAAA,EAAAA,MAAND,EACFE,GAAuBC,EAAAA,EAAAA,cAAY,SAACC,GAA2C,IAAD,EACnFL,EAAe,QAAE,EAAAK,EAAEC,cAAJ,aAAC,EAAgCC,GAChD,GAAE,IAEH,OACC,iBAAKC,UAAU,+CAAf,WACC,kBACCD,GAAIT,EACJW,KAAK,gBACLC,KAAK,QACLC,eAAgBd,EAChBe,UAAW,KAEZ,kBAAOC,QAASf,EAAkBS,GAAIT,EAAkBgB,QAASX,EAAjE,SACEF,GAAEc,EAAAA,EAAAA,GAAyBjB,OAE7B,kBACCS,GAAIR,EACJU,KAAK,gBACLC,KAAK,QACLC,gBAAiBd,EACjBe,UAAW,KAEZ,kBAAOC,QAASd,EAAmBQ,GAAIR,EAAmBe,QAASX,EAAnE,SACEF,GAAEc,EAAAA,EAAAA,GAAyBhB,OAE7B,mBAGF,E,uDDxCUJ,SAAAA,GAAAA,EAAAA,eAAAA,iBAAAA,EAAAA,iBAAAA,kBAAAA,CAAAA,CAAAA,IAAAA,EAAAA,CAAAA,IAKX,IEHWqB,EFGLC,EAAYC,EAAAA,EAAAA,YEHPF,SAAAA,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,WAAAA,YAAAA,CAAAA,CAAAA,IAAAA,EAAAA,CAAAA,IAaX,IAAMG,GAAeC,EAAAA,EAAAA,OAAK,kBAAM,kEAAN,IACpBC,GAAeD,EAAAA,EAAAA,OAAK,kBAAM,+BAAN,IAE1B,SAASE,EAAT,GAAmD,IFV1CC,EACAC,EACFC,EAEEC,EEMgBC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAC/B,GAAwCC,EAAAA,EAAAA,UAAS,YAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQ9B,GAAMC,EAAAA,EAAAA,MAAND,EACA+B,EAASL,EAATK,KACFC,GAAWC,EAAAA,EAAAA,MFdTX,GAAUY,EAAAA,EAAAA,KAAVZ,MACAC,GAAcY,EAAAA,EAAAA,KAAdZ,UACFC,GAAWY,EAAAA,EAAAA,QAAY,MAErBX,GAAoBY,EAAAA,EAAAA,IAAa,GAAD,OAAIrB,EAAJ,kBAAuBM,GAAS,CACvEgB,cAAc,EACdC,kBAAmB,GACnBC,kBAAmB,IACnBC,OAAQ,WACPhB,EAAgB,CACfhB,KAAM,oBACNiC,WAAYnB,IAKbC,EAASmB,QAAUC,aAAY,WAC9BnB,EAAgB,CAAEhB,KAAM,OAAQoC,IAAI,WAAD,OAAatB,IAChD,GAJ2B,IAK5B,EACDuB,QAAS,WAIRC,cAAcvB,EAASmB,QACvB,EACDK,UAAW,SAACC,GACX,IAAMC,EAAaC,KAAKC,MAAMH,EAAMI,MAGpC,OAFaH,aAAH,EAAGA,EAAYzC,MAGxB,KAAKf,EAAwB4D,eAC7B,KAAK5D,EAAwB6D,iBAC5B/D,EAAAA,EAAAA,KAAyB,sBAG3B,IAhCMiC,iBEeR+B,EAAAA,EAAAA,YAAU,WACT1B,EACCE,EAASyB,SAASC,SAAS,sBACxB3C,EAAa4C,WACb5C,EAAa6C,SAEjB,GAAE,CAAC5B,EAASyB,WAEb,IAAMI,GAAsB1D,EAAAA,EAAAA,cAC3B,SAAC2D,GACAhC,EAAgBgC,GAChB,IAAMC,EAAeD,IAAU/C,EAAa6C,SAAW7B,EAAlC,UAA4CA,EAA5C,aACrBJ,EAAQqC,KAAKD,EACb,GACD,CAACpC,EAASI,IAEX,OACC,qBAASxB,UAAU,oCAAnB,WACC,iBAAKA,UAAU,+DAAf,WACC,eAAIA,UAAU,2DAAd,SACEP,GAAEc,EAAAA,EAAAA,GAAyBe,OAE7B,gBAAKtB,UAAU,mCAAf,UACC,SAACZ,EAAD,CACCE,iBAAkBkB,EAAa6C,SAC/B9D,kBAAmBiB,EAAa4C,WAChC/D,qBAAsBiC,IAAiBd,EAAa4C,WACpD5D,gBAAiB8D,UAKpB,gBAAKtD,UAAU,mCAAf,UACC,SAAC,EAAA0D,SAAD,CAAUC,UAAU,SAAC,KAAD,IAApB,UACC,UAAC,KAAD,YACC,SAAC,KAAD,CAAOnC,KAAMA,EAAMoC,OAAK,EAACC,UAAWlD,KACpC,SAAC,KAAD,CAAOa,KAAI,UAAKA,EAAL,aAAsBoC,OAAK,EAACC,UAAWhD,aAMvD,CAEc,SAASiD,EAAYC,GACnC,OACC,SAACC,EAAA,EAAD,WACC,SAAClD,GAAD,UAAmBiD,KAGrB,C","sources":["eventChannels/contact.ts","pages/Contacts/socket/useContactSocket.tsx","shared/components/SwitchToggle/SwitchToggle.tsx","pages/Contacts/ContactMain.tsx"],"sourcesContent":["import { eventbus } from 'packages/eventbus';\n\nexport const contactEventChannel = eventbus<{\n\trefetchContactList: () => void;\n}>();\n","import config from 'config';\nimport { contactEventChannel } from 'eventChannels/contact';\nimport { useAuth } from 'modules/auth/hooks/useAuth';\nimport { useRef } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport { useAppState } from 'shared/state';\n\nconst enum ContactSocketEventTypes {\n\tcontact_locked = 'contact_locked',\n\tcontact_unlocked = 'contact_unlocked'\n}\n\nconst socketURL = config.API_WS_DEV;\n\nexport default function useContactSocket() {\n\tconst { token } = useAuth();\n\tconst { companyId } = useAppState();\n\tconst timerRef = useRef<any>(null);\n\n\tconst { sendJsonMessage } = useWebSocket(`${socketURL}?token=${token}`, {\n\t\tretryOnError: true,\n\t\treconnectAttempts: 10,\n\t\treconnectInterval: 60 * 1000,\n\t\tonOpen: () => {\n\t\t\tsendJsonMessage({\n\t\t\t\ttype: 'contact_handshake',\n\t\t\t\tcompany_id: companyId\n\t\t\t});\n\n\t\t\tconst FIVE_MINUTE_TIMEOUT = 5 * 60 * 1000;\n\n\t\t\ttimerRef.current = setInterval(() => {\n\t\t\t\tsendJsonMessage({ type: 'ping', key: `company_${companyId}` });\n\t\t\t}, FIVE_MINUTE_TIMEOUT);\n\t\t},\n\t\tonClose: () => {\n\t\t\tif (process.env.NODE_ENV !== 'production') {\n\t\t\t\tconsole.log('contact socket closed');\n\t\t\t}\n\t\t\tclearInterval(timerRef.current);\n\t\t},\n\t\tonMessage: (event) => {\n\t\t\tconst messageObj = JSON.parse(event.data);\n\t\t\tconst type = messageObj?.type;\n\n\t\t\tswitch (type) {\n\t\t\t\tcase ContactSocketEventTypes.contact_locked:\n\t\t\t\tcase ContactSocketEventTypes.contact_unlocked: {\n\t\t\t\t\tcontactEventChannel.emit('refetchContactList');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { convertToLocalizationKey } from 'shared/services/utils/convertToLocalizationKey';\n\ntype Props = {\n\tdefaultOptionChecked: boolean;\n\tfirstOptionTitle: string;\n\tsecondOptionTitle: string;\n\tonOptionToggled: (title: string) => void;\n};\n\nexport const SwitchToggle = ({\n\tdefaultOptionChecked,\n\tfirstOptionTitle,\n\tsecondOptionTitle,\n\tonOptionToggled\n}: Props) => {\n\tconst { t } = useTranslation();\n\tconst onClickOptionHandler = useCallback((e: React.MouseEvent<HTMLLabelElement>) => {\n\t\tonOptionToggled((e.target as HTMLLabelElement)?.id);\n\t}, []);\n\n\treturn (\n\t\t<div className=\"switch-toggle-custom switch-ios font-poppins\">\n\t\t\t<input\n\t\t\t\tid={firstOptionTitle}\n\t\t\t\tname=\"switch_toggle\"\n\t\t\t\ttype=\"radio\"\n\t\t\t\tdefaultChecked={defaultOptionChecked}\n\t\t\t\ttabIndex={-1}\n\t\t\t/>\n\t\t\t<label htmlFor={firstOptionTitle} id={firstOptionTitle} onClick={onClickOptionHandler}>\n\t\t\t\t{t(convertToLocalizationKey(firstOptionTitle))}\n\t\t\t</label>\n\t\t\t<input\n\t\t\t\tid={secondOptionTitle}\n\t\t\t\tname=\"switch_toggle\"\n\t\t\t\ttype=\"radio\"\n\t\t\t\tdefaultChecked={!defaultOptionChecked}\n\t\t\t\ttabIndex={-1}\n\t\t\t/>\n\t\t\t<label htmlFor={secondOptionTitle} id={secondOptionTitle} onClick={onClickOptionHandler}>\n\t\t\t\t{t(convertToLocalizationKey(secondOptionTitle))}\n\t\t\t</label>\n\t\t\t<a />\n\t\t</div>\n\t);\n};\n","import { Suspense, lazy, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Route, RouterProps, Switch, useLocation } from 'react-router';\nimport { Loader } from 'shared/components';\nimport ErrorBoundary from 'shared/components/ErrorBoundary';\nimport { SwitchToggle } from 'shared/components/SwitchToggle/SwitchToggle';\nimport { convertToLocalizationKey } from 'shared/services/utils/convertToLocalizationKey';\nimport useContactSocket from './socket/useContactSocket';\n\nconst enum OptionTitles {\n\tContacts = 'Contacts',\n\tCategories = 'Categories'\n}\n\ntype Props = {\n\tmatch: {\n\t\turl: string;\n\t\tpath: string;\n\t};\n\thistory: RouterProps['history'];\n};\n\nconst ContactsPage = lazy(() => import('./ContactsPage'));\nconst CategoryPage = lazy(() => import('./Category'));\n\nfunction ContactsInner({ match, history }: Props) {\n\tconst [switchOption, setSwitchOption] = useState('Contacts');\n\tconst { t } = useTranslation();\n\tconst { path } = match;\n\tconst location = useLocation();\n\n\t//instantiating contact socket\n\tuseContactSocket();\n\n\tuseEffect(() => {\n\t\tsetSwitchOption(\n\t\t\tlocation.pathname.includes('/contacts/category')\n\t\t\t\t? OptionTitles.Categories\n\t\t\t\t: OptionTitles.Contacts\n\t\t);\n\t}, [location.pathname]);\n\n\tconst handleOptionToggled = useCallback(\n\t\t(title: string) => {\n\t\t\tsetSwitchOption(title);\n\t\t\tconst computedPath = title === OptionTitles.Contacts ? path : `${path}/category`;\n\t\t\thistory.push(computedPath);\n\t\t},\n\t\t[history, path]\n\t);\n\treturn (\n\t\t<section className=\"contacts-wrapper h-full py-5 px-7\">\n\t\t\t<div className=\"contacts-wrapper__top mb-4 flex items-center justify-between\">\n\t\t\t\t<h3 className=\"contacts-top__title text-2xl font-medium dark:text-white\">\n\t\t\t\t\t{t(convertToLocalizationKey(switchOption))}\n\t\t\t\t</h3>\n\t\t\t\t<div className=\"contacts-top__switch-toggle w-52\">\n\t\t\t\t\t<SwitchToggle\n\t\t\t\t\t\tfirstOptionTitle={OptionTitles.Contacts}\n\t\t\t\t\t\tsecondOptionTitle={OptionTitles.Categories}\n\t\t\t\t\t\tdefaultOptionChecked={switchOption !== OptionTitles.Categories}\n\t\t\t\t\t\tonOptionToggled={handleOptionToggled}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"contacts-wrapper__content h-full\">\n\t\t\t\t<Suspense fallback={<Loader />}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={path} exact component={ContactsPage} />\n\t\t\t\t\t\t<Route path={`${path}/category`} exact component={CategoryPage} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Suspense>\n\t\t\t</div>\n\t\t</section>\n\t);\n}\n\nexport default function ContactMain(props: Props) {\n\treturn (\n\t\t<ErrorBoundary>\n\t\t\t<ContactsInner {...props} />\n\t\t</ErrorBoundary>\n\t);\n}\n"],"names":["contactEventChannel","eventbus","ContactSocketEventTypes","SwitchToggle","defaultOptionChecked","firstOptionTitle","secondOptionTitle","onOptionToggled","t","useTranslation","onClickOptionHandler","useCallback","e","target","id","className","name","type","defaultChecked","tabIndex","htmlFor","onClick","convertToLocalizationKey","OptionTitles","socketURL","config","ContactsPage","lazy","CategoryPage","ContactsInner","token","companyId","timerRef","sendJsonMessage","match","history","useState","switchOption","setSwitchOption","path","location","useLocation","useAuth","useAppState","useRef","useWebSocket","retryOnError","reconnectAttempts","reconnectInterval","onOpen","company_id","current","setInterval","key","onClose","clearInterval","onMessage","event","messageObj","JSON","parse","data","contact_locked","contact_unlocked","useEffect","pathname","includes","Categories","Contacts","handleOptionToggled","title","computedPath","push","Suspense","fallback","exact","component","ContactMain","props","ErrorBoundary"],"sourceRoot":""}